-- ------------------------------------------------------------------------------------------------
-- 1. SETUP: TABLES
-- ------------------------------------------------------------------------------------------------


-- Table for Admin Credentials (for hardcoded application login)
create table if not exists public.admin_credentials (
  id uuid primary key default gen_random_uuid(),
  username text unique not null,
  password text not null, -- Store securely in production, plain text for demo setup
  phone text unique,
  created_at timestamptz default now()
);


-- Default Admin User (REQUIRED for admin-login.html to work)
-- NOTE: Update the password in production.
insert into public.admin_credentials (username, password, phone)
values ('admin', 'admin', '+917207509620')
on conflict (username) do update set password = EXCLUDED.password, phone = EXCLUDED.phone;



-- Table for Admin Notes (Special Announcements)
create table if not exists public.admin_notes (
  id bigint generated by default as identity primary key,
  title text not null,
  content text not null,
  priority text,
  category text,
  is_important boolean default false,
  updated_at timestamptz default now()
);


-- Table for Student Login Logs
create table if not exists public.student_logins (
  id bigint generated by default as identity primary key,
  email text not null,
  student_id text,
  login_at timestamptz default now()
);



-- Table for Bus Stops (Lookup table)
create table if not exists public.bus_stops (
  id bigint generated by default as identity primary key,
  stop_name text unique not null
);


-- Table for Bus Routes
create table if not exists public.bus_routes (
  id uuid primary key default gen_random_uuid(),
  route_number text unique not null,
  route_name text not null,
  created_at timestamptz default now()
);


-- Junction Table for Route-Stops (Sequence and ETA)
create table if not exists public.route_stops (
  route_id uuid not null references public.bus_routes(id) on delete cascade,
  stop_id bigint not null references public.bus_stops(id) on delete restrict,
  sequence_order integer not null,
  estimated_arrival_time time not null,
  primary key (route_id, sequence_order)
);



-- Table for Live Bus Positions (from existing file)
create table if not exists public.bus_positions (
  bus_no text primary key,
  lat double precision not null,
  lng double precision not null,
  speed double precision,
  heading double precision,
  updated_at timestamptz not null default now()
);


-- ------------------------------------------------------------------------------------------------
-- 2. RLS POLICIES (Row Level Security)
-- ------------------------------------------------------------------------------------------------


alter table public.admin_credentials enable row level security;
alter table public.admin_notes enable row level security;
alter table public.student_logins enable row level security;
alter table public.bus_stops enable row level security;
alter table public.bus_routes enable row level security;
alter table public.route_stops enable row level security;
alter table public.bus_positions enable row level security;


-- Admin_Credentials (Only accessible via backend functions, or by authenticated user for update/read)
drop policy if exists admin_credentials_read on public.admin_credentials;
create policy admin_credentials_read
on public.admin_credentials
for select
to authenticated
using (auth.uid() is not null); -- Allow authenticated access


-- Admin_Notes (Read by all, written by authenticated admin)
drop policy if exists admin_notes_read on public.admin_notes;
drop policy if exists admin_notes_insert on public.admin_notes;
create policy admin_notes_read
on public.admin_notes
for select
to anon, authenticated
using (true);
create policy admin_notes_insert
on public.admin_notes
for insert
to authenticated
with check (auth.uid() is not null);


-- Student_Logins (Written by authenticated/anon client, read by authenticated admin)
drop policy if exists student_logins_insert on public.student_logins;
drop policy if exists student_logins_read on public.student_logins;
create policy student_logins_insert
on public.student_logins
for insert
to anon, authenticated
with check (true);
create policy student_logins_read
on public.student_logins
for select
to authenticated
using (auth.uid() is not null);
-- Policy to allow authenticated admin to clear logs
drop policy if exists student_logins_delete on public.student_logins;
create policy student_logins_delete
on public.student_logins
for delete
to authenticated
using (auth.uid() is not null);


-- Bus Stops, Routes, Route Stops (Read by all, written by authenticated admin)
drop policy if exists bus_data_read on public.bus_routes;
drop policy if exists bus_data_write on public.bus_routes;
create policy bus_data_read
on public.bus_routes
for select
to anon, authenticated
using (true);
create policy bus_data_write
on public.bus_routes
for all
to authenticated
using (auth.uid() is not null) with check (auth.uid() is not null);


drop policy if exists bus_stops_read on public.bus_stops;
create policy bus_stops_read
on public.bus_stops
for select
to anon, authenticated
using (true);


drop policy if exists route_stops_read on public.route_stops;
create policy route_stops_read
on public.route_stops
for select
to anon, authenticated
using (true);


-- Bus_Positions (Read by all, written/updated by authenticated drivers)
drop policy if exists bus_positions_read on public.bus_positions;
drop policy if exists bus_positions_insert on public.bus_positions;
drop policy if exists bus_positions_update on public.bus_positions;
create policy bus_positions_read
on public.bus_positions
for select
to anon, authenticated
using (true);
create policy bus_positions_insert
on public.bus_positions
for insert
to authenticated
with check (true);
create policy bus_positions_update
on public.bus_positions
for update
to authenticated
using (true) with check (true);


-- ------------------------------------------------------------------------------------------------
-- 3. REALTIME CONFIGURATION
-- ------------------------------------------------------------------------------------------------


-- Enable Realtime for all data tables
alter publication supabase_realtime add table public.admin_notes, public.bus_positions;



-- ------------------------------------------------------------------------------------------------
-- 4. RPC FUNCTIONS (Remote Procedure Calls)
-- ------------------------------------------------------------------------------------------------


-- 4.1. Function to save admin note (Used in admin-interface.html)
create or replace function public.save_admin_note(
    p_title text,
    p_content text,
    p_priority text,
    p_category text,
    p_is_important boolean
)
returns void
security definer -- Required to bypass RLS on INSERT if needed, but RLS allows authenticated
language plpgsql
as $$
begin
  -- Delete all previous notes to always keep only the latest one
  delete from public.admin_notes;


  -- Insert the new note (the RLS policy handles authentication check)
  insert into public.admin_notes (title, content, priority, category, is_important)
  values (p_title, p_content, p_priority, p_category, p_is_important);
end;
$$;
-- Grant execution permission to the authenticated role
grant execute on function public.save_admin_note(text, text, text, text, boolean) to authenticated;



-- 4.2. Function to synchronize/update a bus route (Used in admin-interface.html)
create or replace function public.sync_route(
    route_json json
)
returns void
security definer -- Used to handle cascade deletes and updates across tables
language plpgsql
as $$
declare
    v_route_number text := route_json->>'busNo';
    v_route_name text := route_json->>'route';
    v_stops_array json := route_json->'stops';
    v_route_id uuid;
    v_stop_data json;
    v_stop_name text;
    v_stop_time time;
    v_stop_id bigint;
    v_sequence integer := 0;
begin
    -- 1. Find or create the bus_route record
    select id into v_route_id from public.bus_routes where route_number = v_route_number;


    if v_route_id is null then
        -- Insert new route
        insert into public.bus_routes (route_number, route_name)
        values (v_route_number, v_route_name)
        returning id into v_route_id;
    else
        -- Update existing route name
        update public.bus_routes set route_name = v_route_name where id = v_route_id;
    end if;


    -- 2. Clear old stops for this route (CASCADE will handle route_stops)
    delete from public.route_stops where route_id = v_route_id;


    -- 3. Process the new stops array
    for v_stop_data in select * from json_array_elements(v_stops_array)
    loop
        v_stop_name := v_stop_data->>'name';
        v_stop_time := v_stop_data->>'time';
        v_sequence := v_sequence + 1;


        -- 3a. Find or create bus_stop record
        select id into v_stop_id from public.bus_stops where stop_name = v_stop_name;


        if v_stop_id is null then
            insert into public.bus_stops (stop_name)
            values (v_stop_name)
            returning id into v_stop_id;
        end if;


        -- 3b. Insert into route_stops
        insert into public.route_stops (route_id, stop_id, sequence_order, estimated_arrival_time)
        values (v_route_id, v_stop_id, v_sequence, v_stop_time);
    end loop;
end;
$$;
-- Grant execution permission to the authenticated role
grant execute on function public.sync_route(json) to authenticated;


-- ------------------------------------------------------------------------------------------------
-- 5. Helper function for Student Login (from existing code)
-- ------------------------------------------------------------------------------------------------
create or replace function public.log_student_login(
    p_email text,
    p_student_id text
)
returns void
security definer
language sql
as $$
  insert into public.student_logins (email, student_id, login_at)
  values (p_email, p_student_id, now());
$$;
grant execute on function public.log_student_login(text, text) to anon, authenticated;



-- ------------------------------------------------------------------------------------------------
-- 6. INDEXES (from existing file)
-- ------------------------------------------------------------------------------------------------
create index if not exists idx_bus_positions_updated_at on public.bus_positions(updated_at desc);
create index if not exists idx_bus_positions_geo on public.bus_positions(lat, lng);
create index if not exists idx_student_logins_login_at on public.student_logins(login_at desc);
